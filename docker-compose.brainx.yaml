services:
  rabbitmq:
    image: x-rabbitmq:${DOCKER_IMAGE_VERSION}
    container_name: x-rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5673}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15673}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-admin}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST:-default}
    volumes:
      - ${RABBITMQ_DATA_PATH:-docker-data/rabbitmq}:/rabbitmq
      # - ${RABBITMQ_CONFIG_PATH:-docker-data/rabbitmq/rabbitmq-config.yaml}:/etc/rabbitmq/rabbitmq-config.yaml
    networks:
      - networkX

  # 定义共享配置的锚点
  brainx-backend-base: &brainx-backend-base
    container_name: brainx-backend-base
    image: brainx-backend:${DOCKER_IMAGE_VERSION}
    volumes:
      - ./docker-data/brainx/backend/storage/public/static:/app/storage/public/static
    command: ["tail", "-f", "/dev/null"]
    networks:
      - networkX

  # Backend 服务
  brainx-backend:
    <<: *brainx-backend-base
    container_name: brainx-backend
    volumes:
      - ${BRAINX_BACKEND_CONFIG_FOLDER}:/app/etc
      - ${BRAINX_BACKEND_LOG_PATH}:/app/logs
      - ${BRAINX_BACKEND_CACHE_FOLDER}:/root/.cache
      - ${BRAINX_BACKEND_MODEL_FOLDER}:/root/brainx/model
    ports:
      - "${BRAINX_BACKEND_PORT}:8000" # FastAPI 映射到主机端口
    # command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    command:
      ["make", "-f", "/app/docker/Makefile-build.mk", "-C", "/app", "app-init"]
      # ["make", "-f", "/app/docker/Makefile-py.mk", "-C", "/app", "app-init"]

    networks:
      - networkX

  # Celery worker for another queue (e.g., default queue)
  brainx-task:
    <<: *brainx-backend-base
    container_name: brainx-task
    volumes:
      - ${BRAINX_BACKEND_CONFIG_FOLDER}:/app/etc
      - ${BRAINX_BACKEND_LOG_PATH}:/app/logs
      - ${BRAINX_BACKEND_CACHE_FOLDER}:/root/.cache
      - ${BRAINX_BACKEND_MODEL_FOLDER}:/root/brainx/model
    command:
      [
        "./dist/task/task",
        "-A",
        "app.service.task.celery_worker",
        "--loglevel=info",
        "-n",
        "brainx@worker",
        "-P",
        "gevent",
      ]
    ports: []
    networks:
      - networkX

  brainx-task-rag:
    <<: *brainx-backend-base
    container_name: brainx-task-rag
    volumes:
      - ${BRAINX_BACKEND_CONFIG_FOLDER}:/app/etc
      - ${BRAINX_BACKEND_LOG_PATH}:/app/logs
      - ${BRAINX_BACKEND_CACHE_FOLDER}:/root/.cache
      - ${BRAINX_BACKEND_MODEL_FOLDER}:/root/brainx/model
    command:
      [
        "./dist/task/task",
        "-A",
        "app.service.task.celery_worker",
        "-Q",
        "rag_queue",
        "--loglevel=info",
        "-n",
        "brainx@worker_rag",
        "-P",
        "gevent",
      ]
    ports: []
    networks:
      - networkX

  brainx-frontend:
    container_name: brainx-frontend
    image: brainx-frontend:${DOCKER_IMAGE_VERSION}
    networks:
      - networkX
    ports:
      - "${BRAINX_FRONTEND_PORT}:3000"

networks:
  networkX: # 定义正确的网络
    driver: bridge # 网络驱动器

name: artisan-cloud-x
